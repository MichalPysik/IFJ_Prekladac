// možná oprava LL gramatiky, pokud nebude fungovat precedenční gramatika
// <expression> se zde chová jako terminál

1. <program>        -> package id EOL <program>
2. <program>        -> func id ( <param_in_first> ) <funkce_body> EOL <program>
3. <program>        -> EOL <program>
4. <program>        -> EOF

5. <param_in_first> -> id <type> <param_in_next>
6. <param_in_first> -> ε
7. <param_in_next>  -> , id <type> <param_in_next>
8. <param_in_next>  -> ε

9. <funkce_body>    -> { EOL <statements> }
10. <funkce_body>   -> ( <type> <param_out_next> ) { EOL <statements> }

11. <param_out_next>-> , <type> <param_out_next>
12. <param_out_next>-> ε



13. <statements>    -> id <statement_id> EOL <statements>
14. <statements>    -> return <expression> <expr_next> EOL <statements>
15. <statements>    -> if <expression> { EOL <statements> } else { EOL <statements> } EOL <statements>
16. <statements>    -> for <for_definition> ; <expression> ; <for_assignment> { EOL <statements> } EOL <statements>
17. <statements>    -> EOL <statements>
18. <statements>    -> ε


19. <statement_id>  -> ( <expression> <expr_next> )
20. <statement_id>  -> := <expression_id>
21. <statement_id>  -> = <expression_id>
22. <statement_id>  -> , id <id_next>

23. <id_next>       -> , id <id_next>
24. <id_next>       -> := <expression_ids>
25. <id_next>       -> = <expression_ids>


26. <for_definition>-> id := <expression_id>
27. <for_definition>-> ε
28. <for_assignment>-> id = <expression_id>
29. <for_assignment>-> ε


30. <expression_ids>-> id ( <expression> <expr_next> )
31. <expression_ids>-> <expression> <expr_next>


32. <expr_next>     -> , <expression> <expr_next>
33. <expr_next>     -> ε



34. <type>          -> int
35. <type>          -> float
36. <type>          -> string
