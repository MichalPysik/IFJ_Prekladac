// možná oprava LL gramatiky, pokud nebude fungovat precedenční gramatika
// <expression> se zde chová jako terminál

1. <program>        -> package id EOL <program>
2. <program>        -> func id ( <param_in_first> ) <funkce_body> EOL <program>
3. <program>        -> EOL <program>
4. <program>        -> EOF

5. <param_in_first> -> id <type> <param_in_next>
6. <param_in_first> -> ε
7. <param_in_next>  -> , id <type> <param_in_next>
8. <param_in_next>  -> ε

9. <funkce_body>    -> { EOL <statements> }
10. <funkce_body>   -> ( <type> <param_out_next> ) { EOL <statements> }

11. <param_out_next>-> , <type> <param_out_next>
12. <param_out_next>-> ε



13. <statements>    -> id <statement_id> EOL <statements>
14. <statements>    -> return <expression> <expr_next> EOL <statements>
15. <statements>    -> if <expression> { EOL <statements> } else { EOL <statements> } EOL <statements>
16. <statements>    -> for <for_definition> ; <expression> ; <for_assignment> { EOL <statements> } EOL <statements>
17. <statements>    -> EOL <statements>
18. <statements>    -> ε


19. <statement_id>  -> ( <expr_first> )
20. <statement_id>  -> := <id_expression>
21. <statement_id>  -> = <id_expression>
22. <statement_id>  -> , id <id_next>
23. <id_next>       -> , id <id_next>
24. <id_next>       -> = <ids_expression>


25. <for_definition>-> id := <id_expression>
26. <for_definition>-> ε

27. <for_assignment>-> id <for_assign_id>
28. <for_assignment>-> ε
29. <for_assign_id> -> , id <for_assign_id>
30. <for_assign_id> -> = <ids_expression>


31. <id_expression> -> id ( <expr_first> )
32. <id_expression> -> <expression>

33. <ids_expression>-> id ( <expr_first> )
34. <ids_expression>-> <expr_first>


35. <expr_first>    -> <expression> <expr_next>
36. <expr_first>    -> ε

37. <expr_next>     -> , <expression> <expr_next>
38. <expr_next>     -> ε



39. <type>          -> int
40. <type>          -> float
41. <type>          -> string
