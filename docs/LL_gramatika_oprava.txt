//expression je v LL gramatice teď tady jako terminál, doufám, že to je správně

1. <program>        -> package id EOL <program>
2. <program>        -> func id ( <param_in_first> ) <funkce_body> EOL <program>
3. <program>        -> EOL <program>
4. <program>        -> EOF

5. <param_in_first> -> id <type> <param_in_next>
6. <param_in_first> -> ε
7. <param_in_next>  -> , id <type> <param_in_next>
8. <param_in_next>  -> ε

9. <funkce_body>    -> { EOL <statements> }
10. <funkce_body>   -> ( <type> <param_out_next> ) { EOL <statements> }

11. <param_out_next>-> , <type> <param_out_next>
12. <param_out_next>-> ε

13. <statement_list>-> ODSTRANĚNO
14. <statement_list>-> ε ODSTRANĚNO


15. <statements>    -> id <state_id_list> EOL <statements>
16. <statements>    -> return <expression> <expr_next> EOL <statements>
17. <statements>    -> if <expression> { EOL <statements> } else { EOL <statements> } EOL <statements>
18. <statements>    -> for <for_definition> ; <expression> ; <for_assignment> { EOL <statements> } EOL <statements>
19. <statements>    -> EOL <statements>
19. <statements>    -> ε

20. <state_id_list> -> ( <expression> <expr_next> )
21. <state_id_list> -> := <expression>
22. <state_id_list> -> = <expression>
23. <state_id_list> -> , id <id_next>
24. <id_next>       -> , id <id_next>
25. <id_next>       -> := <expression> <expr_next>
26. <id_next>       -> = <expression> <expr_next>

27. <param_first>   -> ODSTRANĚNO
28. <param_first>   -> ε ODSTRANĚNO




29. <if>            -> ODSTRANĚNO
30. <for>           -> ODSTRANĚNO
31. <for_definition>-> id := <expression>
32. <for_definition>-> ε
33. <for_assignment>-> id = <expression>
34. <for_assignment>-> ε

35. <type>          -> int
36. <type>          -> float
37. <type>          -> string

38. <expr_next>     -> , <expression> <expr_next>
39. <expr_next>     -> ε