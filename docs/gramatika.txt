// program
<program>        -> package id EOL <program>
<program>        -> func id ( <param_in_first> ) <funkce_body> EOL <program>
<program>        -> EOL <program>
<program>        -> EOF

<param_in_first> -> id <type> <param_in_next>
<param_in_first> -> ε
<param_in_next>  -> , id <type> <param_in_next>
<param_in_next>  -> ε


// tělo funkce
<funkce_body>    -> { EOL <statements> }
<funkce_body>   -> ( <type> <param_out_next> ) { EOL <statements> }

<param_out_next>-> , <type> <param_out_next>
<param_out_next>-> ε




// příkazy, if, for

<statements>    -> id <state_id_list> EOL <statements>
<statements>    -> return <expression> <expr_next> EOL <statements>
<statements>    -> if <expression> { EOL <statements> } else { EOL <statements> } EOL <statements>
<statements>    -> for <for_definition> ; <expression> ; <for_assignment> { EOL <statements> } EOL <statements>
<statements>    -> EOL <statements>
<statements>    -> ε

<state_id_list> -> ( <expression> <expr_next> )
<state_id_list> -> := <expression>
<state_id_list> -> = <expression>
<state_id_list> -> , id <id_next>
<id_next>       -> , id <id_next>
<id_next>       -> := <expression> <expr_next>
<id_next>       -> = <expression> <expr_next>

<for_definition>-> id := <expression>
<for_definition>-> ε
<for_assignment>-> id = <expression>
<for_assignment>-> ε


// výrazy
<expr_next>     -> , <expression> <expr_next>
<expr_next>     -> ε

// priorita výrazů (expressionů)
<expression>    -> ( <expression> <expr_next> )
//aritmeticke operace
<expression>    -> <expression> + <expression>
<expression>    -> <expression> - <expression>
<expression>    -> <expression> * <expression>
<expression>    -> <expression> / <expression>
// porovnávací operátory
<expression>    -> <expression> == <expression>
<expression>    -> <expression> != <expression>
<expression>    -> <expression> > <expression>
<expression>    -> <expression> < <expression>
<expression>    -> <expression> >= <expression>
<expression>    -> <expression> <= <expression>
// hodnoty
<expression>    -> <value>

<value>         -> id
<value>         -> STRING
<value>         -> INT
<value>         -> FLOAT


<type>          -> int
<type>          -> float
<type>          -> string
